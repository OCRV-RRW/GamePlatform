// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getGameByID = `-- name: GetGameByID :one
select g.id, title, description, src, icon, created from game g
where g.id = $1
`

func (q *Queries) GetGameByID(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByID, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Src,
		&i.Icon,
		&i.Created,
	)
	return i, err
}

const getGamePreview = `-- name: GetGamePreview :many
select p.id, p.image, p.video from game_preview gp
join preview p on p.id = gp.preview_id
where gp.game_id = $1
`

func (q *Queries) GetGamePreview(ctx context.Context, gameID uuid.UUID) ([]Preview, error) {
	rows, err := q.db.Query(ctx, getGamePreview, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Preview
	for rows.Next() {
		var i Preview
		if err := rows.Scan(&i.ID, &i.Image, &i.Video); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGames = `-- name: GetGames :many
select id, title, description, src, icon, created from game
order by created desc
`

func (q *Queries) GetGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Src,
			&i.Icon,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
