// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into platform.user(name, email, password, is_admin, verification_code, verified, birthday, gender)
values ($1, $2, $3, $4, $5, $6, $7, $8)
returning id, name, email, password, is_admin, verification_code, verified, birthday, gender, created_at
`

type CreateUserParams struct {
	Name             string
	Email            string
	Password         string
	IsAdmin          bool
	VerificationCode string
	Verified         bool
	Birthday         *time.Time
	Gender           *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (PlatformUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.IsAdmin,
		arg.VerificationCode,
		arg.Verified,
		arg.Birthday,
		arg.Gender,
	)
	var i PlatformUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.VerificationCode,
		&i.Verified,
		&i.Birthday,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
delete from platform.user u
where u.id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
select id, name, email, password, is_admin, verification_code, verified, birthday, gender, created_at from platform.user u
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]PlatformUser, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlatformUser
	for rows.Next() {
		var i PlatformUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.IsAdmin,
			&i.VerificationCode,
			&i.Verified,
			&i.Birthday,
			&i.Gender,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, name, email, password, is_admin, verification_code, verified, birthday, gender, created_at from platform.user u
where u.email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (PlatformUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i PlatformUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.VerificationCode,
		&i.Verified,
		&i.Birthday,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, name, email, password, is_admin, verification_code, verified, birthday, gender, created_at from platform.user u
where u.id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (PlatformUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i PlatformUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.VerificationCode,
		&i.Verified,
		&i.Birthday,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByVerificationCode = `-- name: GetUserByVerificationCode :one
select id, name, email, password, is_admin, verification_code, verified, birthday, gender, created_at from platform.user u
where u.verification_code = $1
`

func (q *Queries) GetUserByVerificationCode(ctx context.Context, verificationCode string) (PlatformUser, error) {
	row := q.db.QueryRow(ctx, getUserByVerificationCode, verificationCode)
	var i PlatformUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.VerificationCode,
		&i.Verified,
		&i.Birthday,
		&i.Gender,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :exec
update platform.user set
	name = $2,
	email = $3,
	password  = $4,
	is_admin = $5,
	verified = $6,
	birthday = $7,
	gender = $8
where id = $1
`

type UpdateUserByIdParams struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Password string
	IsAdmin  bool
	Verified bool
	Birthday *time.Time
	Gender   *string
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.Exec(ctx, updateUserById,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.IsAdmin,
		arg.Verified,
		arg.Birthday,
		arg.Gender,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
update platform.user u set
	password = $2
where id = $1
`

type UpdateUserPasswordParams struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserVerification = `-- name: UpdateUserVerification :exec
update platform.user set
	verified = $2,
	verification_code = $3
where id  = $1
`

type UpdateUserVerificationParams struct {
	ID               uuid.UUID
	Verified         bool
	VerificationCode string
}

func (q *Queries) UpdateUserVerification(ctx context.Context, arg UpdateUserVerificationParams) error {
	_, err := q.db.Exec(ctx, updateUserVerification, arg.ID, arg.Verified, arg.VerificationCode)
	return err
}
