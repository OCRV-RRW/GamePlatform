// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package DTO

import (
	repository "gameplatform/internal/repository"
	uuid "github.com/google/uuid"
	"time"
)

type GameConverterImpl struct{}

func (c *GameConverterImpl) GameResponseOnlyToGameResponse(source *GameResponseOnly) GameResponse {
	var DTOGameResponse GameResponse
	if source != nil {
		var DTOGameResponse2 GameResponse
		DTOGameResponse2.ID = (*source).ID
		DTOGameResponse2.Title = (*source).Title
		DTOGameResponse2.Description = (*source).Description
		DTOGameResponse2.Src = (*source).Src
		DTOGameResponse2.Icon = (*source).Icon
		DTOGameResponse = DTOGameResponse2
	}
	return DTOGameResponse
}
func (c *GameConverterImpl) GetGameToGameResponse(source *repository.GetGame) GameResponse {
	var DTOGameResponse GameResponse
	if source != nil {
		var DTOGameResponse2 GameResponse
		DTOGameResponse2.ID = UuidToString((*source).ID)
		DTOGameResponse2.Title = (*source).Title
		DTOGameResponse2.Description = (*source).Description
		DTOGameResponse2.Src = (*source).Src
		DTOGameResponse2.Icon = (*source).Icon
		DTOGameResponse = DTOGameResponse2
	}
	return DTOGameResponse
}
func (c *GameConverterImpl) GetGameToGameResponseOnly(source *repository.GetGame) GameResponseOnly {
	var DTOGameResponseOnly GameResponseOnly
	if source != nil {
		var DTOGameResponseOnly2 GameResponseOnly
		DTOGameResponseOnly2.ID = UuidToString((*source).ID)
		DTOGameResponseOnly2.Title = (*source).Title
		DTOGameResponseOnly2.Description = (*source).Description
		DTOGameResponseOnly2.Src = (*source).Src
		DTOGameResponseOnly2.Icon = (*source).Icon
		DTOGameResponseOnly = DTOGameResponseOnly2
	}
	return DTOGameResponseOnly
}
func (c *GameConverterImpl) GetGamesToGamesResponseOnly(source []repository.GetGame) []GameResponseOnly {
	var DTOGameResponseOnlyList []GameResponseOnly
	if source != nil {
		DTOGameResponseOnlyList = make([]GameResponseOnly, len(source))
		for i := 0; i < len(source); i++ {
			DTOGameResponseOnlyList[i] = c.repositoryGetGameToDTOGameResponseOnly(source[i])
		}
	}
	return DTOGameResponseOnlyList
}
func (c *GameConverterImpl) GetPreviewToPreviewResponse(source *repository.GetPreview) PreviewResponse {
	var DTOPreviewResponse PreviewResponse
	if source != nil {
		var DTOPreviewResponse2 PreviewResponse
		DTOPreviewResponse2.ID = UuidToString((*source).ID)
		DTOPreviewResponse2.Image = (*source).Image
		if (*source).Video != nil {
			xstring := *(*source).Video
			DTOPreviewResponse2.Video = &xstring
		}
		DTOPreviewResponse = DTOPreviewResponse2
	}
	return DTOPreviewResponse
}
func (c *GameConverterImpl) GetPreviewsToPreviewResponses(source []repository.GetPreview) []PreviewResponse {
	var DTOPreviewResponseList []PreviewResponse
	if source != nil {
		DTOPreviewResponseList = make([]PreviewResponse, len(source))
		for i := 0; i < len(source); i++ {
			DTOPreviewResponseList[i] = c.repositoryGetPreviewToDTOPreviewResponse(source[i])
		}
	}
	return DTOPreviewResponseList
}
func (c *GameConverterImpl) repositoryGetGameToDTOGameResponseOnly(source repository.GetGame) GameResponseOnly {
	var DTOGameResponseOnly GameResponseOnly
	DTOGameResponseOnly.ID = UuidToString(source.ID)
	DTOGameResponseOnly.Title = source.Title
	DTOGameResponseOnly.Description = source.Description
	DTOGameResponseOnly.Src = source.Src
	DTOGameResponseOnly.Icon = source.Icon
	return DTOGameResponseOnly
}
func (c *GameConverterImpl) repositoryGetPreviewToDTOPreviewResponse(source repository.GetPreview) PreviewResponse {
	var DTOPreviewResponse PreviewResponse
	DTOPreviewResponse.ID = UuidToString(source.ID)
	DTOPreviewResponse.Image = source.Image
	if source.Video != nil {
		xstring := *source.Video
		DTOPreviewResponse.Video = &xstring
	}
	return DTOPreviewResponse
}

type UserConverterImpl struct{}

func (c *UserConverterImpl) GetUserToUpdateUser(source *repository.GetUser) repository.UpdateUser {
	var repositoryUpdateUser repository.UpdateUser
	if source != nil {
		var repositoryUpdateUser2 repository.UpdateUser
		repositoryUpdateUser2.ID = c.uuidUUIDToUuidUUID((*source).ID)
		repositoryUpdateUser2.Name = (*source).Name
		repositoryUpdateUser2.Email = (*source).Email
		repositoryUpdateUser2.Password = (*source).Password
		repositoryUpdateUser2.IsAdmin = (*source).IsAdmin
		repositoryUpdateUser2.Verified = (*source).Verified
		repositoryUpdateUser2.Birthday = c.pTimeTimeToPTimeTime((*source).Birthday)
		if (*source).Gender != nil {
			xstring := *(*source).Gender
			repositoryUpdateUser2.Gender = &xstring
		}
		repositoryUpdateUser = repositoryUpdateUser2
	}
	return repositoryUpdateUser
}
func (c *UserConverterImpl) GetUserToUserResponse(source *repository.GetUser) UserResponse {
	var DTOUserResponse UserResponse
	if source != nil {
		var DTOUserResponse2 UserResponse
		DTOUserResponse2.ID = c.uuidUUIDToUuidUUID((*source).ID)
		DTOUserResponse2.Name = (*source).Name
		DTOUserResponse2.Email = (*source).Email
		DTOUserResponse2.IsAdmin = (*source).IsAdmin
		DTOUserResponse2.Birthday = c.pTimeTimeToPTimeTime((*source).Birthday)
		if (*source).Gender != nil {
			DTOUserResponse2.Gender = *(*source).Gender
		}
		DTOUserResponse2.CreatedAt = TimeToTime((*source).CreatedAt)
		DTOUserResponse = DTOUserResponse2
	}
	return DTOUserResponse
}
func (c *UserConverterImpl) GetUsersToUserResponses(source []repository.GetUser) []UserResponse {
	var DTOUserResponseList []UserResponse
	if source != nil {
		DTOUserResponseList = make([]UserResponse, len(source))
		for i := 0; i < len(source); i++ {
			DTOUserResponseList[i] = c.repositoryGetUserToDTOUserResponse(source[i])
		}
	}
	return DTOUserResponseList
}
func (c *UserConverterImpl) pTimeTimeToPTimeTime(source *time.Time) *time.Time {
	var pTimeTime *time.Time
	if source != nil {
		timeTime := TimeToTime((*source))
		pTimeTime = &timeTime
	}
	return pTimeTime
}
func (c *UserConverterImpl) repositoryGetUserToDTOUserResponse(source repository.GetUser) UserResponse {
	var DTOUserResponse UserResponse
	DTOUserResponse.ID = c.uuidUUIDToUuidUUID(source.ID)
	DTOUserResponse.Name = source.Name
	DTOUserResponse.Email = source.Email
	DTOUserResponse.IsAdmin = source.IsAdmin
	DTOUserResponse.Birthday = c.pTimeTimeToPTimeTime(source.Birthday)
	if source.Gender != nil {
		DTOUserResponse.Gender = *source.Gender
	}
	DTOUserResponse.CreatedAt = TimeToTime(source.CreatedAt)
	return DTOUserResponse
}
func (c *UserConverterImpl) uuidUUIDToUuidUUID(source uuid.UUID) uuid.UUID {
	var uuidUUID uuid.UUID
	for i := 0; i < len(source); i++ {
		uuidUUID[i] = source[i]
	}
	return uuidUUID
}
